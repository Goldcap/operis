// ==========================================================================
// Project:   Ember EasyForm
// Copyright: Copyright 2013 DockYard, LLC. and contributors.
// License:   Licensed under MIT license (see license.js)
// ==========================================================================


minispade.register('ember-easyForm/config', "(function() {Ember.EasyForm.Config = Ember.Namespace.create({\n  _wrappers: {\n    'default': {\n      formClass: '',\n      fieldErrorClass: 'fieldWithErrors',\n      inputClass: 'input',\n      autocompleteClass: 'autocomplete',\n      errorClass: 'error',\n      hintClass: 'hint',\n      labelClass: '',\n      inputTemplate: 'easyForm/input',\n      autocompleteTemplate: 'easyForm/autocomplete',\n      errorTemplate: 'easyForm/error',\n      labelTemplate: 'easyForm/label',\n      hintTemplate: 'easyForm/hint',\n      wrapControls: false,\n      controlsWrapperClass: '',\n      buttonClass: ''\n    }\n  },\n  modulePrefix: 'appkit',\n  _inputTypes: {},\n  _templates: {},\n  registerWrapper: function(name, wrapper) {\n    this._wrappers[name] = Ember.$.extend({}, this._wrappers['default'], wrapper);\n  },\n  getWrapper: function(name) {\n    var wrapper = this._wrappers[name];\n    Ember.assert(\"The wrapper '\" + name + \"' was not registered.\", wrapper);\n    return wrapper;\n  },\n  registerInputType: function(name, type){\n    this._inputTypes[name] = type;\n  },\n  getInputType: function(name) {\n    return this._inputTypes[name];\n  },\n  registerTemplate: function(name, template) {\n    this._templates[name] = template;\n  },\n  getTemplate: function(name) {\n    return this._templates[name];\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/config");minispade.register('ember-easyForm/core', "(function() {Ember.EasyForm = Ember.Namespace.create({\n  VERSION: '1.0.0.beta.1'\n});\n\n})();\n//@ sourceURL=ember-easyForm/core");minispade.register('ember-easyForm/helpers', "(function() {minispade.require('ember-easyForm/helpers/error-field');\nminispade.require('ember-easyForm/helpers/form-for');\nminispade.require('ember-easyForm/helpers/hint-field');\nminispade.require('ember-easyForm/helpers/input');\nminispade.require('ember-easyForm/helpers/input-field');       \nminispade.require('ember-easyForm/helpers/autocomplete');\nminispade.require('ember-easyForm/helpers/autocomplete-field');\nminispade.require('ember-easyForm/helpers/label-field');\nminispade.require('ember-easyForm/helpers/submit');\n\n})();\n//@ sourceURL=ember-easyForm/helpers");minispade.register('ember-easyForm/helpers/autocomplete-field', "(function() {var get = Ember.get,\n    set = Ember.set;\n\nEmber.Handlebars.registerHelper('autocomplete-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.propertyBinding) {\n    options.hash.property = Ember.Handlebars.get(this, options.hash.propertyBinding, options);\n  }\n\n  if (options.hash.inputOptionsBinding) {\n    options.hash.inputOptions = Ember.Handlebars.get(this, options.hash.inputOptionsBinding, options);\n  }\n\n  var modelPath = Ember.Handlebars.get(this, 'formForModelPath', options);\n  options.hash.modelPath = modelPath;\n\n  property = options.hash.property;\n\n  var modelPropertyPath = function(property) {\n    if(!property) { return null; }\n\n    var startsWithKeyword = !!options.data.keywords[property.split('.')[0]];\n\n    if (startsWithKeyword) {\n      return property;\n    }\n\n    if (modelPath) {\n      return modelPath + '.' + property;\n    } else {\n      return property;\n    }\n  };\n\n  options.hash.valueBinding = modelPropertyPath(property);\n\n  var context = this,\n    propertyType = function(property) {\n      var constructor = (get(context, 'content') || context).constructor;\n\n      if (constructor.proto) {\n        return Ember.meta(constructor.proto(), false).descs[property];\n      } else {\n        return null;\n      }\n    };\n\n  options.hash.viewName = 'input-field-'+options.data.view.elementId;\n\n  if (options.hash.inputOptions) {\n    var inputOptions = options.hash.inputOptions, optionName;\n    for (optionName in inputOptions) {\n      if (inputOptions.hasOwnProperty(optionName)) {\n       options.hash[optionName] = inputOptions[optionName];\n      }\n    }\n    delete options.hash.inputOptions;\n  }\n\n  if (options.hash.as === 'text') {\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextArea, options);\n  } else if (options.hash.as === 'select') {\n    delete(options.hash.valueBinding);\n\n    options.hash.contentBinding   = modelPropertyPath(options.hash.collection);\n    options.hash.selectionBinding = modelPropertyPath(options.hash.selection);\n    options.hash.valueBinding     = modelPropertyPath(options.hash.value);\n\n    if (Ember.isNone(options.hash.selectionBinding) && Ember.isNone(options.hash.valueBinding)) {\n      options.hash.selectionBinding = modelPropertyPath(property);\n    }\n\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Select, options);\n  } else if (options.hash.as === 'checkbox') {\n    if (Ember.isNone(options.hash.checkedBinding)) {\n      options.hash.checkedBinding = modelPropertyPath(property);\n    }\n\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Checkbox, options);\n  } else {\n    if (!options.hash.as) {\n      if (property.match(/password/)) {\n        options.hash.type = 'password';\n      } else if (property.match(/email/)) {\n        options.hash.type = 'email';\n      } else if (property.match(/url/)) {\n        options.hash.type = 'url';\n      } else if (property.match(/color/)) {\n        options.hash.type = 'color';\n      } else if (property.match(/^tel/)) {\n        options.hash.type = 'tel';\n      } else if (property.match(/search/)) {\n        options.hash.type = 'search';\n      } else {\n        if (propertyType(property) === 'number' || typeof(get(context,property)) === 'number') {\n          options.hash.type = 'number';\n        } else if (propertyType(property) === 'date' || (!Ember.isNone(get(context,property)) && get(context,property).constructor === Date)) {\n          options.hash.type = 'date';\n        } else if (propertyType(property) === 'boolean' || (!Ember.isNone(context.get(property)) && get(context,property).constructor === Boolean)) {\n          options.hash.checkedBinding = property;\n          return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Checkbox, options);\n        }\n      }\n    } else {\n      var inputType = Ember.EasyForm.Config.getInputType(options.hash.as);\n      if (inputType) {\n        return Ember.Handlebars.helpers.view.call(context, inputType, options);\n      }\n\n      options.hash.type = options.hash.as;\n    }\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextField, options);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/autocomplete-field");minispade.register('ember-easyForm/helpers/autocomplete', "(function() {Ember.Handlebars.helpers['ember-input'] = Ember.Handlebars.helpers['autocomplete'];\n\nEmber.Handlebars.registerHelper('autocomplete', function(property, options) {\n  if (arguments.length === 1) {\n    return Ember.Handlebars.helpers['ember-input'].call(this, arguments[0]);\n  }\n\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.isBlock = !!(options.fn);\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Autocomplete, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/autocomplete");minispade.register('ember-easyForm/helpers/error-field', "(function() {Ember.Handlebars.registerHelper('error-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.propertyBinding) {\n    options.hash.property = Ember.Handlebars.get(this, options.hash.propertyBinding, options);\n  }\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Error, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/error-field");minispade.register('ember-easyForm/helpers/form-for', "(function() {Ember.Handlebars.registerHelper('form-for', function(object, options) {\n  options.data.keywords.formForModelPath = object;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Form, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/form-for");minispade.register('ember-easyForm/helpers/hint-field', "(function() {Ember.Handlebars.registerHelper('hint-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.text || options.hash.textBinding) {\n    return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Hint, options);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/hint-field");minispade.register('ember-easyForm/helpers/input-field', "(function() {var get = Ember.get,\n    set = Ember.set;\n\nEmber.Handlebars.registerHelper('input-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.propertyBinding) {\n    options.hash.property = Ember.Handlebars.get(this, options.hash.propertyBinding, options);\n  }\n\n  if (options.hash.inputOptionsBinding) {\n    options.hash.inputOptions = Ember.Handlebars.get(this, options.hash.inputOptionsBinding, options);\n  }\n\n  var modelPath = Ember.Handlebars.get(this, 'formForModelPath', options);\n  options.hash.modelPath = modelPath;\n\n  property = options.hash.property;\n\n  var modelPropertyPath = function(property) {\n    if(!property) { return null; }\n\n    var startsWithKeyword = !!options.data.keywords[property.split('.')[0]];\n\n    if (startsWithKeyword) {\n      return property;\n    }\n\n    if (modelPath) {\n      return modelPath + '.' + property;\n    } else {\n      return property;\n    }\n  };\n\n  options.hash.valueBinding = modelPropertyPath(property);\n\n  var context = this,\n    propertyType = function(property) {\n      var constructor = (get(context, 'content') || context).constructor;\n\n      if (constructor.proto) {\n        return Ember.meta(constructor.proto(), false).descs[property];\n      } else {\n        return null;\n      }\n    };\n\n  options.hash.viewName = 'input-field-'+options.data.view.elementId;\n\n  if (options.hash.inputOptions) {\n    var inputOptions = options.hash.inputOptions, optionName;\n    for (optionName in inputOptions) {\n      if (inputOptions.hasOwnProperty(optionName)) {\n       options.hash[optionName] = inputOptions[optionName];\n      }\n    }\n    delete options.hash.inputOptions;\n  }\n\n  if (options.hash.as === 'text') {\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextArea, options);\n  } else if (options.hash.as === 'select') {\n    delete(options.hash.valueBinding);\n\n    options.hash.contentBinding   = modelPropertyPath(options.hash.collection);\n    options.hash.selectionBinding = modelPropertyPath(options.hash.selection);\n    options.hash.valueBinding     = modelPropertyPath(options.hash.value);\n\n    if (Ember.isNone(options.hash.selectionBinding) && Ember.isNone(options.hash.valueBinding)) {\n      options.hash.selectionBinding = modelPropertyPath(property);\n    }\n\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Select, options);\n  } else if (options.hash.as === 'checkbox') {\n    if (Ember.isNone(options.hash.checkedBinding)) {\n      options.hash.checkedBinding = modelPropertyPath(property);\n    }\n\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Checkbox, options);\n  } else {\n    if (!options.hash.as) {\n      if (property.match(/password/)) {\n        options.hash.type = 'password';\n      } else if (property.match(/email/)) {\n        options.hash.type = 'email';\n      } else if (property.match(/url/)) {\n        options.hash.type = 'url';\n      } else if (property.match(/color/)) {\n        options.hash.type = 'color';\n      } else if (property.match(/^tel/)) {\n        options.hash.type = 'tel';\n      } else if (property.match(/search/)) {\n        options.hash.type = 'search';\n      } else {\n        if (propertyType(property) === 'number' || typeof(get(context,property)) === 'number') {\n          options.hash.type = 'number';\n        } else if (propertyType(property) === 'date' || (!Ember.isNone(get(context,property)) && get(context,property).constructor === Date)) {\n          options.hash.type = 'date';\n        } else if (propertyType(property) === 'boolean' || (!Ember.isNone(context.get(property)) && get(context,property).constructor === Boolean)) {\n          options.hash.checkedBinding = property;\n          return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Checkbox, options);\n        }\n      }\n    } else {\n      var inputType = Ember.EasyForm.Config.getInputType(options.hash.as);\n      if (inputType) {\n        return Ember.Handlebars.helpers.view.call(context, inputType, options);\n      }\n\n      options.hash.type = options.hash.as;\n    }\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextField, options);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/input-field");minispade.register('ember-easyForm/helpers/input', "(function() {Ember.Handlebars.helpers['ember-input'] = Ember.Handlebars.helpers['input'];\n\nEmber.Handlebars.registerHelper('input', function(property, options) {\n  if (arguments.length === 1) {\n    return Ember.Handlebars.helpers['ember-input'].call(this, arguments[0]);\n  }\n\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.isBlock = !!(options.fn);\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Input, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/input");minispade.register('ember-easyForm/helpers/label-field', "(function() {Ember.Handlebars.registerHelper('label-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.viewName = 'label-field-'+options.data.view.elementId;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Label, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/label-field");minispade.register('ember-easyForm/helpers/submit', "(function() {Ember.Handlebars.registerHelper('submit', function(value, options) {\n  if (typeof(value) === 'object') {\n    options = value;\n    value = undefined;\n  }\n  options.hash.context = this;\n  options.hash.value = value || 'Submit';\n  return (options.hash.as === 'button') ?\n    Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Button, options)\n    :\n    Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Submit, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/submit");minispade.register('ember-easyForm', "(function() {minispade.require('ember-easyForm/core');\nminispade.require('ember-easyForm/config');\nminispade.require('ember-easyForm/helpers');\nminispade.require('ember-easyForm/views');\nminispade.require('ember-easyForm/templates');\nminispade.require('ember-easyForm/utilities');\n\n})();\n//@ sourceURL=ember-easyForm");minispade.register('ember-easyForm/templates', "(function() {minispade.require('ember-easyForm/templates/error');\nminispade.require('ember-easyForm/templates/hint');\nminispade.require('ember-easyForm/templates/input');\nminispade.require('ember-easyForm/templates/inputControls');\nminispade.require('ember-easyForm/templates/autocomplete');  \nminispade.require('ember-easyForm/templates/autocompleteControls');\nminispade.require('ember-easyForm/templates/label');\n\n})();\n//@ sourceURL=ember-easyForm/templates");minispade.register('ember-easyForm/templates/autocomplete', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/autocomplete', Ember.Handlebars.compile('{{label-field propertyBinding=\"view.property\" textBinding=\"view.label\"}}{{partial \"easyForm/autocompleteControls\"}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/autocomplete");minispade.register('ember-easyForm/templates/autocompleteControls', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/autocompleteControls', Ember.Handlebars.compile('{{input-field propertyBinding=\"view.property\" inputOptionsBinding=\"view.inputOptionsValues\"}}{{#if view.showError}}{{error-field propertyBinding=\"view.property\"}}{{/if}}{{#if view.hint}}{{hint-field propertyBinding=\"view.property\" textBinding=\"view.hint\"}}{{/if}}<ul class=\"blowme\">{{#each view.searchResults}}<li {{action \"setValue\" this target=\"view\"}}>{{this.formatted}}</li>{{/each}}</ul>'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/autocompleteControls");minispade.register('ember-easyForm/templates/error', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/error', Ember.Handlebars.compile('{{view.errorText}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/error");minispade.register('ember-easyForm/templates/hint', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/hint', Ember.Handlebars.compile('{{view.hintText}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/hint");minispade.register('ember-easyForm/templates/input', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/input', Ember.Handlebars.compile('{{label-field propertyBinding=\"view.property\" textBinding=\"view.label\"}}{{partial \"easyForm/inputControls\"}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/input");minispade.register('ember-easyForm/templates/inputControls', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/inputControls', Ember.Handlebars.compile('{{input-field propertyBinding=\"view.property\" inputOptionsBinding=\"view.inputOptionsValues\"}}{{#if view.showError}}{{error-field propertyBinding=\"view.property\"}}{{/if}}{{#if view.hint}}{{hint-field propertyBinding=\"view.property\" textBinding=\"view.hint\"}}{{/if}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/inputControls");minispade.register('ember-easyForm/templates/label', "(function() {Ember.EasyForm.Config.registerTemplate('easyForm/label', Ember.Handlebars.compile('{{view.labelText}}'));\n\n})();\n//@ sourceURL=ember-easyForm/templates/label");minispade.register('ember-easyForm/utilities', "(function() {Ember.EasyForm.humanize = function(string) {\n  return string.underscore().split('_').join(' ').capitalize();\n};\n\nEmber.EasyForm.eachTranslatedAttribute = function(object, fn) {\n  var isTranslatedAttribute = /(.+)Translation$/,\n      isTranslatedAttributeMatch;\n\n  for (var key in object) {\n    isTranslatedAttributeMatch = key.match(isTranslatedAttribute);\n    if (isTranslatedAttributeMatch) {\n      fn.call(object, isTranslatedAttributeMatch[1], Ember.I18n.t(object[key]));\n    }\n  }\n};\n\nEmber.EasyForm.processOptions = function(property, options) {\n  if (options) {\n    if (Ember.I18n) {\n      var eachTranslatedAttribute = Ember.I18n.eachTranslatedAttribute || Ember.EasyForm.eachTranslatedAttribute;\n      eachTranslatedAttribute(options.hash, function (attribute, translation) {\n        options.hash[attribute] = translation;\n        delete options.hash[attribute + 'Translation'];\n      });\n    }\n    options.hash.property = property;\n  } else {\n    options = property;\n  }\n\n  return options;\n};\n\n})();\n//@ sourceURL=ember-easyForm/utilities");minispade.register('ember-easyForm/views', "(function() {minispade.require('ember-easyForm/views/base_view');\nminispade.require('ember-easyForm/views/checkbox');\nminispade.require('ember-easyForm/views/error');\nminispade.require('ember-easyForm/views/form');\nminispade.require('ember-easyForm/views/hint');\nminispade.require('ember-easyForm/views/input'); \nminispade.require('ember-easyForm/views/autocomplete');\nminispade.require('ember-easyForm/views/label');\nminispade.require('ember-easyForm/views/select');\nminispade.require('ember-easyForm/views/submit');\nminispade.require('ember-easyForm/views/button');\nminispade.require('ember-easyForm/views/textArea');\nminispade.require('ember-easyForm/views/textField');\n\n})();\n//@ sourceURL=ember-easyForm/views");minispade.register('ember-easyForm/views/autocomplete', "(function() {Ember.EasyForm.Autocomplete = Ember.EasyForm.BaseView.extend({\n  init: function() {\n    this._super();\n    this.classNameBindings.push('showError:' + this.get('wrapperConfig.fieldErrorClass'));\n    Ember.defineProperty(this, 'showError', Ember.computed.and('canShowValidationError', 'formForModel.errors.' + this.property + '.firstObject'));\n    if (!this.isBlock) {\n      this.set('templateName', this.get('wrapperConfig.autocompleteTemplate'));\n    }\n  },\n  setupValidationDependencies: function() {\n    var keys = this.get('formForModel._dependentValidationKeys'), key;\n    if (keys) {\n      for(key in keys) {\n        if (keys[key].contains(this.property)) {\n          this._keysForValidationDependencies.pushObject(key);\n        }\n      }\n    }\n  }.on('init'),\n  _keysForValidationDependencies: Ember.A(),\n  dependentValidationKeyCanTrigger: false,\n  tagName: 'div',\n  classNames: ['string'],\n  classNameBindings: ['wrapperConfig.autocompleteClass'],\n  didInsertElement: function() {\n    var name = 'label-field-'+this.elementId,\n        label = this.get(name);\n    if (!label) { return; }\n    this.set(name+'.for', this.get('input-field-'+this.elementId+'.elementId'));\n    this.addObserver('formForModel.errors.'+this.get('property')+'.@each', this, \"errorsChanged\");\n    this.addObserver('input-field-'+this.elementId+'.value', this, \"fetchResults\" );\n  },\n  concatenatedProperties: ['inputOptions', 'bindableInputOptions'],\n  inputOptions: ['as', 'collection', 'optionValuePath', 'optionLabelPath', 'selection', 'value', 'multiple', 'name', 'listFormat', 'valueFormat', 'params' ],\n  bindableInputOptions: ['placeholder', 'prompt', 'disabled'],\n  defaultOptions: {\n    name: function(){\n      if (this.property) {\n        return this.property;\n      }\n    }\n  },\n  inputOptionsValues: function() {\n    var options = {}, i, key, keyBinding, value, inputOptions = this.inputOptions, bindableInputOptions = this.bindableInputOptions, defaultOptions = this.defaultOptions;\n    for (i = 0; i < inputOptions.length; i++) {\n      key = inputOptions[i];\n      if (this[key]) {\n        if (typeof(this[key]) === 'boolean') {\n          this[key] = key;\n        }\n\n        options[key] = this[key];\n      }\n    }\n    for (i = 0; i < bindableInputOptions.length; i++) {\n      key = bindableInputOptions[i];\n      keyBinding = key + 'Binding';\n      if (this[key] || this[keyBinding]) {\n        options[keyBinding] = 'view.' + key;\n      }\n    }\n\n    for (key in defaultOptions) {\n      if (!defaultOptions.hasOwnProperty(key)) { continue; }\n      if (options[key]) { continue; }\n\n      if (value = defaultOptions[key].apply(this)) {\n        options[key] = value;\n      }\n    }\n\n    return options;\n  }.property(),\n  focusOut: function() {\n    this.set('hasFocusedOut', true);\n    this.showValidationError();\n  },\n  showValidationError: function() {\n    if (this.get('hasFocusedOut')) {\n      if (Ember.isEmpty(this.get('formForModel.errors.' + this.property))) {\n        this.set('canShowValidationError', false);\n      } else {\n        this.set('canShowValidationError', true);\n      }\n    }\n  },\n  input: function() {\n    this._keysForValidationDependencies.forEach(function(key) {\n     this.get('parentView.childViews').forEach(function(view) {\n       if (view.property === key) {\n         view.showValidationError();\n       }\n     }, this);\n    }, this);\n  },\n  fetchResults: function() {\n        var element = this.get('input-field-'+this.elementId);\n        var st = element.get('value');\n        if (! st) {\n            this.set('searchResults',[]);\n            return;    \n        }\n        \n        var model = this.get('formForModel');\n        var store = model.get('store');\n        var params = this.get('inputOptionsValues.params').split(\",\");\n        var listformat = this.get('inputOptionsValues.listFormat');\n        var valueformat = this.get('inputOptionsValues.valueFormat');\n        var adapter = store.adapterFor(model);\n        var scope = this;\n        \n        adapter.ajax(adapter.buildURL(model.get('constructor.typeKey')), 'GET', {data: {\"search\":st}} ).then(function(payload) {\n            \n            var inflector = Ember.Inflector.inflector;\n            var objects = payload[inflector.pluralize(model.get('constructor.typeKey'))];\n            objects.forEach(function(item, index) {   \n              var data = Array();\n              params.forEach(function(param, pi){\n                data.push(item[param]);\n              });\n              item['formatted'] = Ember.String.htmlSafe(vsprintf(listformat,data));\n              item['business'] = vsprintf(valueformat,data);\n            });\n            scope.set('searchResults',objects);\n        });\n    },\n    actions: {\n        setValue: function(item) {\n            var element = this.get('input-field-'+this.elementId);\n            console.log(item['business']);\n            element.set('value',item['business']);\n                \n        }   \n    }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/autocomplete");minispade.register('ember-easyForm/views/base_view', "(function() {Ember.EasyForm.BaseView = Ember.View.extend({\n  classNameBindings: ['property'],\n  wrapper: function() {\n    var wrapperView = this.nearestWithProperty('wrapper');\n    if (wrapperView) {\n      return wrapperView.get('wrapper');\n    } else {\n      return 'default';\n    }\n  }.property(),\n  wrapperConfig: function() {\n    return Ember.EasyForm.Config.getWrapper(this.get('wrapper'));\n  }.property('wrapper'),\n  templateForName: function(name) {\n    var template;\n\n    if (this.container) {\n      template = this.container.lookup('template:' + name);\n    }\n\n    return template || Ember.EasyForm.Config.getTemplate(name);\n  },\n  formForModel: function(){\n    var formForModelPath = this.get('templateData.keywords.formForModelPath');\n\n    if (formForModelPath === 'context' || formForModelPath === 'controller' || formForModelPath === 'this') {\n      return this.get('context');\n    } else if (formForModelPath) {\n      return this.get('context.' + formForModelPath);\n    } else {\n      return this.get('context');\n    }\n  }.property()\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/base_view");minispade.register('ember-easyForm/views/button', "(function() {Ember.EasyForm.Button = Ember.EasyForm.BaseView.extend({\n  tagName: 'button',\n  template: Ember.Handlebars.compile('{{text}}'),\n  attributeBindings: ['type', 'disabled'],\n  type: 'submit',\n  disabled: function() {\n    return !this.get('formForModel.isValid');\n  }.property('formForModel.isValid'),\n  init: function() {\n    this._super();\n    this.set('formForModel.text', this.value);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/button");minispade.register('ember-easyForm/views/checkbox', "(function() {Ember.EasyForm.Checkbox = Ember.Checkbox.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/checkbox");minispade.register('ember-easyForm/views/error', "(function() {Ember.EasyForm.Error = Ember.EasyForm.BaseView.extend({\n  tagName: 'span',\n  classNameBindings: ['wrapperConfig.errorClass'],\n  init: function() {\n    this._super();\n    Ember.Binding.from('formForModel.errors.' + this.property).to('errors').connect(this);\n  },\n  templateName: Ember.computed.oneWay('wrapperConfig.errorTemplate'),\n  errorText: Ember.computed.oneWay('errors.firstObject')\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/error");minispade.register('ember-easyForm/views/form', "(function() {Ember.EasyForm.Form = Ember.EasyForm.BaseView.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  classNameBindings: ['wrapperConfig.formClass'],\n  novalidate: 'novalidate',\n  wrapper: 'default',\n  init: function() {\n    this._super();\n    this.action = this.action || 'submit';\n  },\n  submit: function(event) {\n    var _this = this,\n        promise;\n\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (Ember.isNone(this.get('formForModel.validate'))) {\n      this.get('controller').send(this.action);\n    } else {\n      if (!Ember.isNone(this.get('formForModel').validate)) {\n        promise = this.get('formForModel').validate();\n      } else {\n        promise = this.get('formForModel.content').validate();\n      }\n      promise.then(function() {\n        if (_this.get('formForModel.isValid')) {\n          _this.get('controller').send(_this.action);\n        }\n      });\n    }\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/form");minispade.register('ember-easyForm/views/hint', "(function() {Ember.EasyForm.Hint = Ember.EasyForm.BaseView.extend({\n  tagName: 'span',\n  classNameBindings: ['wrapperConfig.hintClass'],\n  templateName: Ember.computed.oneWay('wrapperConfig.hintTemplate'),\n  hintText: Ember.computed.oneWay('text')\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/hint");minispade.register('ember-easyForm/views/input', "(function() {Ember.EasyForm.Input = Ember.EasyForm.BaseView.extend({\n  init: function() {\n    this._super();\n    this.classNameBindings.push('showError:' + this.get('wrapperConfig.fieldErrorClass'));\n    Ember.defineProperty(this, 'showError', Ember.computed.and('canShowValidationError', 'formForModel.errors.' + this.property + '.firstObject'));\n    if (!this.isBlock) {\n      this.set('templateName', this.get('wrapperConfig.inputTemplate'));\n    }\n  },\n  setupValidationDependencies: function() {\n    var keys = this.get('formForModel._dependentValidationKeys'), key;\n    if (keys) {\n      for(key in keys) {\n        if (keys[key].contains(this.property)) {\n          this._keysForValidationDependencies.pushObject(key);\n        }\n      }\n    }\n  }.on('init'),\n  _keysForValidationDependencies: Ember.A(),\n  dependentValidationKeyCanTrigger: false,\n  tagName: 'div',\n  classNames: ['string'],\n  classNameBindings: ['wrapperConfig.inputClass'],\n  didInsertElement: function() {\n    var name = 'label-field-'+this.elementId,\n        label = this.get(name);\n    if (!label) { return; }\n    this.set(name+'.for', this.get('input-field-'+this.elementId+'.elementId'));\n    this.addObserver(\"formForModel.errors.\"+this.get('property')+\".@each\", this, \"errorsChanged\");\n  },\n  concatenatedProperties: ['inputOptions', 'bindableInputOptions'],\n  inputOptions: ['as', 'collection', 'optionValuePath', 'optionLabelPath', 'selection', 'value', 'multiple', 'name'],\n  bindableInputOptions: ['placeholder', 'prompt', 'disabled'],\n  defaultOptions: {\n    name: function(){\n      if (this.property) {\n        return this.property;\n      }\n    }\n  },\n  inputOptionsValues: function() {\n    var options = {}, i, key, keyBinding, value, inputOptions = this.inputOptions, bindableInputOptions = this.bindableInputOptions, defaultOptions = this.defaultOptions;\n    for (i = 0; i < inputOptions.length; i++) {\n      key = inputOptions[i];\n      if (this[key]) {\n        if (typeof(this[key]) === 'boolean') {\n          this[key] = key;\n        }\n\n        options[key] = this[key];\n      }\n    }\n    for (i = 0; i < bindableInputOptions.length; i++) {\n      key = bindableInputOptions[i];\n      keyBinding = key + 'Binding';\n      if (this[key] || this[keyBinding]) {\n        options[keyBinding] = 'view.' + key;\n      }\n    }\n\n    for (key in defaultOptions) {\n      if (!defaultOptions.hasOwnProperty(key)) { continue; }\n      if (options[key]) { continue; }\n\n      if (value = defaultOptions[key].apply(this)) {\n        options[key] = value;\n      }\n    }\n\n    return options;\n  }.property(),\n  focusOut: function() {\n    this.set('hasFocusedOut', true);\n    this.showValidationError();\n  },\n  showValidationError: function() {\n    if (this.get('hasFocusedOut')) {\n      if (Ember.isEmpty(this.get('formForModel.errors.' + this.property))) {\n        this.set('canShowValidationError', false);\n      } else {\n        this.set('canShowValidationError', true);\n      }\n    }\n  },\n  input: function() {\n    this._keysForValidationDependencies.forEach(function(key) {\n     this.get('parentView.childViews').forEach(function(view) {\n       if (view.property === key) {\n         view.showValidationError();\n       }\n     }, this);\n    }, this);\n  },\n  errorsChanged: function() {\n    this.set('hasFocusedOut', true);\n    this.showValidationError();\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/input");minispade.register('ember-easyForm/views/label', "(function() {Ember.EasyForm.Label = Ember.EasyForm.BaseView.extend({\n  tagName: 'label',\n  attributeBindings: ['for'],\n  classNameBindings: ['wrapperConfig.labelClass'],\n  labelText: function() {\n    return this.get('text') || Ember.EasyForm.humanize(this.get('property'));\n  }.property('text', 'property'),\n  templateName: Ember.computed.oneWay('wrapperConfig.labelTemplate')\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/label");minispade.register('ember-easyForm/views/select', "(function() {Ember.EasyForm.Select = Ember.Select.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/select");minispade.register('ember-easyForm/views/submit', "(function() {Ember.EasyForm.Submit = Ember.EasyForm.BaseView.extend({\n  tagName: 'input',\n  attributeBindings: ['type', 'value', 'disabled'],\n  classNameBindings: ['wrapperConfig.buttonClass'],\n  type: 'submit',\n  disabled: function() {\n    return !this.get('formForModel.isValid');\n  }.property('formForModel.isValid'),\n  init: function() {\n    this._super();\n    this.set('value', this.value);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/submit");minispade.register('ember-easyForm/views/textArea', "(function() {Ember.EasyForm.TextArea = Ember.TextArea.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/textArea");minispade.register('ember-easyForm/views/textField', "(function() {Ember.EasyForm.TextField = Ember.TextField.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/textField");