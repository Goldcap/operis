{
  "name": "ember-data",
  "version": "1.0.0-beta.10",
  "namespace": "DS",
  "repository": {
    "type": "git",
    "url": "git://github.com/emberjs/data.git"
  },
  "license": "MIT",
  "keywords": [
    "ember-addon"
  ],
  "ember-addon": {
    "main": "lib/ember-addon/index.js"
  },
  "files": [
    "lib/ember-addon"
  ],
  "scripts": {
    "prepublish": "bower install",
    "start": "ember serve",
    "dist": "ember build --environment=production",
    "test": "testem -R dot ci",
    "publish-build": "npm run dist && ./bin/publish_to_s3.js",
    "testem-local": "testem -R dot ci",
    "testem-beta": "testem -f config/testem-beta.json -R dot ci",
    "testem-canary": "testem -f config/testem-canary.json -R dot ci",
    "testem-stable": "testem -f config/testem-stable.json -R dot ci"
  },
  "devDependencies": {
    "aws-sdk": "~2.0.0-rc8",
    "bower": "~1.3",
    "broccoli": "^0.12.3",
    "broccoli-cli": "0.0.1",
    "broccoli-concat": "0.0.7",
    "broccoli-defeatureify": "^0.3.0",
    "broccoli-env": "0.0.1",
    "broccoli-es3-safe-recast": "0.0.8",
    "broccoli-es6-module-transpiler": "^0.1.1",
    "broccoli-es6-transpiler": "^0.1.0",
    "broccoli-file-mover": "~0.2.0",
    "broccoli-jshint": "^0.5.1",
    "broccoli-merge-trees": "^0.1.4",
    "broccoli-render-template": "0.0.3",
    "broccoli-static-compiler": "^0.1.4",
    "broccoli-string-replace": "0.0.2",
    "broccoli-uglify-js": "^0.1.3",
    "broccoli-wrap": "0.0.2",
    "broccoli-yuidoc": "^1.3.0",
    "defeatureify": "~0.1.4",
    "ejs": "^1.0.0",
    "ember-cli": "0.0.43",
    "ember-publisher": "0.0.6",
    "testem": "^0.6.17",
    "yuidocjs": "~0.3.46"
  },
  "readme": "## Ember Data [![Build Status](https://secure.travis-ci.org/emberjs/data.svg?branch=master)](http://travis-ci.org/emberjs/data)\n\nEmber Data is a library for robustly managing model data in your\nEmber.js applications.\n\nEmber Data is designed to be agnostic to the underlying persistence\nmechanism, so it works just as well with JSON APIs over HTTP as it does\nwith streaming WebSockets or local IndexedDB storage.\n\nIt provides many of the facilities you'd find in server-side ORMs like\nActiveRecord, but is designed specifically for the unique environment of\nJavaScript in the browser.\n\nIn particular, Ember Data uses Promises/A+-compatible promises from the\nground up to manage loading and saving records, so integrating with\nother JavaScript APIs is easy.\n\n## Using Ember Data\n\n### Getting Ember Data\n\n```no-highlight\nbower install ember-data --save\n```\n\nThe latest passing build from the \"master\" branch is available on\n[http://emberjs.com/builds/#/canary](http://emberjs.com/builds/#/canary).\n\nSimilarly the latest passing build from the \"beta\" branch can be found\non [http://emberjs.com/builds/#/beta](http://emberjs.com/builds/#/beta)\n\nYou also have the option to build ember-data.js yourself.  Clone the\nrepository, run `broccoli build dist` after [setup](#setup). You'll find\nember-data.js in the `dist` directory.\n\n#### Internet Explorer 8\n\nIf you need to support Internet Explorer, you will need to use es5-shim.js and es5-sham.js from [es5-shim](https://github.com/es-shims/es5-shim).\n\n### Instantiating the Store\n\nIn Ember Data, the _store_ is responsible for managing the lifecycle of\nyour models. Every time you need a model or a collection of models,\nyou'll ask the store for it.\n\nTo create a store, you don't need to do anything. Just by loading the\nEmber Data library, all of the routes and controllers in your\napplication will get a new `store` property. This property is an\ninstance of `DS.Store` that will be shared across all of the routes and\ncontrollers in your app.\n\n### Defining Your Models\n\nFirst thing's first: tell Ember Data about the models in your\napplication. For example, imagine we're writing a blog reader app.\nHere's what your model definition would look like if you're using\nglobals (that is, not something like Ember App Kit or ember-cli):\n\n```js\nvar attr = DS.attr,\n    hasMany = DS.hasMany,\n    belongsTo = DS.belongsTo;\n\nApp.BlogPost = DS.Model.extend({\n  title: attr(),\n  createdAt: attr('date'),\n\n  comments: hasMany('comment')\n});\n\nApp.Comment = DS.Model.extend({\n  body: attr(),\n  username: attr(),\n\n  post: belongsTo('blogPost')\n});\n```\n\nIf you're using ES6 modules (via Ember App Kit or ember-cli), your\nmodels would look like this:\n\n```js\n// app/models/blog-post.js\nvar attr = DS.attr,\n    hasMany = DS.hasMany;\n\nexport default DS.Model.extend({\n  title: attr(),\n  createdAt: attr('date'),\n\n  comments: hasMany('comment')\n});\n\n// app/models/comment.js\nvar attr = DS.attr,\n    belongsTo = DS.belongsTo;\n\nexport default DS.Model.extend({\n  body: attr(),\n  username: attr(),\n\n  post: belongsTo('blogPost')\n});\n```\n\n### A Brief Note on Adapters\n\nWithout immediately diving in to the depths of the architecture, one\nthing you _should_ know is that Ember Data uses an object called an\n_adapter_ to know how to talk to your server.\n\nAn adapter is just an object that knows how to translate requests from\nEmber Data into requests on your server. For example, if I ask the Ember\nData store for a record of type `person` with an ID of `123`, the\nadapter translates that into an XHR request to (for example)\n`api.example.com/v3/person/123.json`.\n\nBy default, Ember Data will use the `RESTAdapter`, which adheres to a\nset of RESTful JSON conventions.\n\nEmber Data also ships with the `FixtureAdapter`, useful for testing and\nprototyping before you have a server, and the `ActiveModelAdapter`,\nwhich is designed to work out-of-the-box with the\n[`ActiveModel::Serializers`](https://github.com/rails-api/active_model_serializers)\ngem for Rails.\n\nTo learn more about adapters, including what conventions the\n`RESTAdapter` follows and how to build your own, see the Ember.js\nGuides: [Connecting to an HTTP\nServer](http://emberjs.com/guides/models/connecting-to-an-http-server/).\n\n### Fetching a Collection of Models\n\nFrom your route or controller:\n\n```js\nthis.store.find('blogPost');\n```\n\nThis returns a promise that resolves to the collection of records.\n\n### Fetching a Single Model\n\n```js\nthis.store.find('blogPost', 123);\n```\n\nThis returns a promise that resolves to the requested record. If the\nrecord can't be found or there was an error during the request, the\npromise will be rejected.\n\n### Even More Documentation\n\nFor much more detail on how to use Ember Data, see the [Ember.js Guides\non models](http://emberjs.com/guides/models/).\n\n## API Stability\n\nEmber Data is still under active development and is currently beta\nquality. That being said, the API has largely stabilized and many\ncompanies are using it in production.\n\nFor details on anticipated changes before the 1.0 release, see the blog\npost [The Road to Ember Data\n1.0](http://emberjs.com/blog/2014/03/18/the-road-to-ember-data-1-0.html).\n\n## How to Run Unit Tests\n\n### Setup\n\n1. Install Node.js from http://nodejs.org or your favorite package manager.\n\n2. Install broccoli and bower. `npm install -g ember-cli bower`\n\n3. Run `npm install` inside the project root to install the JS dependencies.\n\n### In Your Browser\n\n1. To start the development server, run `npm start`.\n\n2. Visit http://localhost:4200\n\n### From the CLI\n\n1. Install phantomjs from http://phantomjs.org\n\n2. Run `npm test`\n",
  "readmeFilename": "README.md",
  "description": "Ember Data is a library for robustly managing model data in your Ember.js applications.",
  "bugs": {
    "url": "https://github.com/emberjs/data/issues"
  },
  "homepage": "https://github.com/emberjs/data",
  "_id": "ember-data@1.0.0-beta.10",
  "_from": "ember-data@1.0.0-beta.10"
}
