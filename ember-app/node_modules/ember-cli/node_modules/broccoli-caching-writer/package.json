{
  "name": "broccoli-caching-writer",
  "version": "0.5.1",
  "description": "Broccoli plugin that allows simple caching (while still allowing N:N) based on the input tree hash.",
  "main": "index.js",
  "author": {
    "name": "Robert Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/rjackson/broccoli-caching-writer.git"
  },
  "scripts": {
    "test": "mocha tests/"
  },
  "keywords": [
    "broccoli-plugin",
    "javascript"
  ],
  "dependencies": {
    "broccoli-kitchen-sink-helpers": "^0.2.5",
    "core-object": "0.0.2",
    "promise-map-series": "^0.2.0",
    "quick-temp": "^0.1.2",
    "rimraf": "^2.2.8",
    "rsvp": "^3.0.14",
    "symlink-or-copy": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "broccoli": "^0.13.0",
    "expect.js": "^0.3.1"
  },
  "gitHead": "c2dfd1d2dca3fe0fc784918eb42c41032aab725f",
  "bugs": {
    "url": "https://github.com/rjackson/broccoli-caching-writer/issues"
  },
  "homepage": "https://github.com/rjackson/broccoli-caching-writer",
  "_id": "broccoli-caching-writer@0.5.1",
  "_shasum": "3e0838abb9d1f93a1dd2958ec3207cfb145e4995",
  "_from": "broccoli-caching-writer@0.5.1",
  "_npmVersion": "2.0.0-beta.0",
  "_npmUser": {
    "name": "rwjblue",
    "email": "robert.w.jackson@me.com"
  },
  "maintainers": [
    {
      "name": "rwjblue",
      "email": "robert.w.jackson@me.com"
    }
  ],
  "dist": {
    "shasum": "3e0838abb9d1f93a1dd2958ec3207cfb145e4995",
    "tarball": "http://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-0.5.1.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-0.5.1.tgz",
  "readme": "# Broccoli Caching Writer\n\n[![Build Status](https://travis-ci.org/rwjblue/broccoli-caching-writer.svg?branch=master)](https://travis-ci.org/rwjblue/broccoli-caching-writer)\n\nAdds a thin caching layer based on the computed hash of the input tree. If the input tree has changed,\nthe `updateCache` method will be called, otherwise (input is the same) the results of the last `updateCache`\ncall will be used instead.\n\nIf you would prefer to perform your plugins work in a non-synchronous way, simply return a promise from `updateCache`.\n\n## Documentation\n\n### `CachingWriter(inputTrees, options)`\n\n`inputTrees` *{Array of Trees | Single Tree}*\n\nCan either be a single tree, or an array of trees. If an array was specified, an array of source paths will be provided when\ncalling `updateCache`.\n\n#### Options\n\n`filterFromCache.include` *{Array of RegExps}*\n\nAn array of regular expressions that files and directories in the input tree must pass (match at least one pattern) in order to be included in the cache hash for rebuilds. In other words, a whitelist of patterns that identify which files and/or directories can trigger a rebuild.\n\n\nDefault: `[]`\n\n----\n\n`filterFromCache.exclude` *{Array of RegExps}*\n\nAn array of regular expressions that files and directories in the input tree cannot pass in order to be included in the cache hash for rebuilds. In other words, a blacklist of patterns that identify which files and/or directories will never trigger a rebuild.\n\n*Note, in the case when a file or directory matches both an include and exlude pattern, the exclude pattern wins*\n\nDefault: `[]`\n\n\n## Switching from `broccoli-writer`\n\nIf your broccoli plugin currently extends `broccoli-writer`,\nand you wish to extend `broccoli-caching-writer` instead:\n\n1. Switch the constructor\n  - Require this module: `var CachingWriter  = require('broccoli-caching-writer');`\n  - Change the prototype to use `CachingWriter`: `MyBroccoliWriter.prototype = Object.create(CachingWriter.prototype);`\n  - In the constructor, ensure that you are calling `CachingWriter.apply(this, arguments);`.\n2. Switch `write` function for an `updateCache` function.\n  - Switch the function signatures:\n    - From: `MyBroccoliWriter.prototype.write = function(readTree, destDir) {`\n    - To: `MyBroccoliWriter.prototype.updateCache = function(srcDir, destDir) {`\n  - Get rid of `readTree`, as `srcPaths` (array of paths from input trees) is already provided:\n    - Code that looks like: `return readTree(this.inputTree).then(function (srcPaths) { /* Do the main processing */ });`\n    - Simply extract the code, `/* Do the main processing */`, and get rid of the function wrapping it.\n\n## Inheritance\n\nbroccoli-caching-writer inherits from [core-object](https://github.com/stefanpenner/core-object) to allow super simple\ninheritance. You can still absolutely use the standard prototypal inheritance, but as you can see below there may be no\nneed.\n\nMake an `index.js` for your package:\n\n```javascript\nvar CachingWriter = require('broccoli-caching-writer');\n\nmodule.exports = CachingWriter.extend({\n  init: function(inputTrees, options) {\n    /* do additional setup here */\n  },\n\n  updateCache: function(srcPaths, destDir) {\n    /* do main processing */\n  }\n});\n```\n\nThen in a consuming Brocfile:\n\n```javascript\nvar MyFoo = require('my-foo'); // package from above\n\nvar tree = new MyFoo([someInput], { some: 'options' });\n```\n\n\n## ZOMG!!! TESTS?!?!!?\n\nI know, right?\n\nRunning the tests:\n\n```javascript\nnpm install\nnpm test\n```\n\n## License\n\nThis project is distributed under the MIT license.\n",
  "readmeFilename": "README.md"
}
