{
  "name": "ember-cli-content-security-policy",
  "version": "0.3.0",
  "description": "This addon adds the Content-Security-Policy header to response sent from the Ember CLI Express server.",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "start": "ember server",
    "build": "ember build",
    "test": "ember test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rwjblue/ember-cli-content-security-policy"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "body-parser": "^1.2.0",
    "broccoli-asset-rev": "0.3.0",
    "broccoli-ember-hbs-template-compiler": "^1.6.1",
    "ember-cli": "0.1.0",
    "ember-cli-ic-ajax": "0.1.1",
    "ember-cli-inject-live-reload": "^1.2.2",
    "ember-cli-qunit": "0.1.0",
    "ember-data": "1.0.0-beta.10",
    "express": "^4.8.5",
    "glob": "^4.0.5"
  },
  "keywords": [
    "ember-addon"
  ],
  "ember-addon": {
    "configPath": "tests/dummy/config",
    "before": [
      "serve-files-middleware",
      "history-support-middleware",
      "proxy-server-middleware"
    ]
  },
  "readme": "# ember-cli-content-security-policy\n\nThis addon adds the `Content-Security-Policy` header to response sent from the Ember CLI Express server.\nClearly, Ember CLI's express server is not intended for production use, and neither is this addon. This is intended as a\ntool to ensure that CSP is kept in the forefront of your thoughts while developing an Ember application.\n\n## Options\n\nThis addon is configured via your applications `config/environment.js` file. Two specific properties are\nused from your projects configuration:\n\n* `contentSecurityPolicyHeader` -- The header to use for CSP. There are two options:\n  - `Content-Security-Policy-Report-Only` This is the default and means nothing is actually blocked but you get warnings in the console.\n  - `Content-Security-Policy` This makes the browser block any action that conflicts with the Content Security Policy.\n\n  The Internet Explorer variant of the header (prefixed with `X-`) is automatically added.\n* `contentSecurityPolicy` -- This is an object that is used to build the final header value. Each key/value\n  in this object is converted into a key/value pair in the resulting header value.\n\nThe default `contentSecurityPolicy` value is:\n\n```javascript\n  contentSecurityPolicy: {\n    'default-src': \"'none'\",\n    'script-src': \"'self'\",\n    'font-src': \"'self'\",\n    'connect-src': \"'self'\",\n    'img-src': \"'self'\",\n    'style-src': \"'self'\",\n    'media-src': \"'self'\"\n  }\n```\n\nWhich is translated into:\n\n```\ndefault-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';\n```\n\n### Example\n\nIf your site uses **Google Fonts**, **Mixpanel**, a custom API at **custom-api.local** and a jQuery plugin which modifies the inline `style` attribute of some elements:\n\n```javascript\n// config/environment.js\nENV.contentSecurityPolicy = {\n  'default-src': \"'none'\",\n  'script-src': \"'self' https://cdn.mxpnl.com\", // Allow scripts from https://cdn.mxpnl.com\n  'font-src': \"'self' http://fonts.gstatic.com\", // Allow fonts to be loaded from http://fonts.gstatic.com\n  'connect-src': \"'self' https://api.mixpanel.com http://custom-api.local\", // Allow data (ajax/websocket) from api.mixpanel.com and custom-api.local\n  'img-src': \"'self'\",\n  'style-src': \"'self' 'unsafe-inline' http://fonts.googleapis.com\", // Allow inline styles and loaded CSS from http://fonts.googleapis.com \n  'media-src': \"'self'\"\n}\n```\n\nMore information on these options can be found at [content-security-policy.com](http://content-security-policy.com/)\n\n*Please note*:\n+ when running `ember serve` with live reload enabled, we also add the `liveReloadPort` to\nthe `connect-src` and `script-src` whitelists.\n+ when running in development we add `'unsafe-eval'` to the `script-src`. This is to allow the `wrapInEval`\nfunctionality that ember-cli does by default (as a sourcemaps \"hack\").\n+ when setting the values on `contentSecurityPolicy` object to 'self', 'none', 'unsafe-inline','unsafe-eval','inline-script' or 'eval-script', you must include the single quote as shown in the default value above.\n\n## Installation\n\n```bash\nnpm install --save-dev ember-cli-content-security-policy\n```\n\n## Resources:\n\n* http://www.w3.org/TR/CSP/\n* http://content-security-policy.com/\n* https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rwjblue/ember-cli-content-security-policy/issues"
  },
  "homepage": "https://github.com/rwjblue/ember-cli-content-security-policy",
  "_id": "ember-cli-content-security-policy@0.3.0",
  "_from": "ember-cli-content-security-policy@0.3.0"
}
